{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "lenskart-miniproj-adf"
		},
		"ls_azure_sql_lenskart_db_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_azure_sql_lenskart_db'"
		},
		"ls_lenskart_new_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_lenskart_new'"
		},
		"ls_lenskart_raw_blob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_lenskart_raw_blob'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/bestselling-brand')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Mohana",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "mohana",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProuctSource": {},
									"TopSellingBrandOnCount": {},
									"totalSaleOfBrands": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/mohana')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/brandWithPurchasedCount')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "brandWithPurchasedCount",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "brandWithPurchasedCount",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"productSource": {},
									"txnSource": {},
									"ClassificationSoldCount": {},
									"brandWithPurchasedCount": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/brandWithPurchasedCount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/curated_retainCustomer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "getMetricsRetainCustomer",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_final_metric",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dimCustomer": {},
									"dimProducts": {},
									"factTransactions": {},
									"retaningCustomer": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "restructured_pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_final_metric')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data- ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "import productDetails",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_lenskart_raw_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "raw_data_azure_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "import customerDetails",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "import productDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_lenskart_customers_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "customers_data_azure_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "import transactionDetails",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "import customerDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_lenskart_transactions_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "transactions_data_azure_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "import customer_reviews",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "import transactionDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_customer_reviews",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dataset_customer_reviews_azure_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "stores_data_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "raw_stores_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_lenskart_raw_csv')]",
				"[concat(variables('factoryId'), '/datasets/raw_data_azure_sql')]",
				"[concat(variables('factoryId'), '/datasets/dataset_lenskart_customers_csv')]",
				"[concat(variables('factoryId'), '/datasets/customers_data_azure_sql')]",
				"[concat(variables('factoryId'), '/datasets/dataset_lenskart_transactions_csv')]",
				"[concat(variables('factoryId'), '/datasets/transactions_data_azure_sql')]",
				"[concat(variables('factoryId'), '/datasets/dataset_customer_reviews')]",
				"[concat(variables('factoryId'), '/datasets/dataset_customer_reviews_azure_sql')]",
				"[concat(variables('factoryId'), '/datasets/stores_data_csv')]",
				"[concat(variables('factoryId'), '/datasets/raw_stores_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data- ingestion_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "import productDetails",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"id"
									]
								},
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "prep_Products",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Prep_ProductsRefined",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "import customerDetails",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "import productDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"customer_id"
									]
								},
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_lenskart_customers_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "customer_data_to_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "import transactionDetails",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "import customerDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "transaction_data_from_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "transaction_data_to_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "import customer_reviews",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "import transactionDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dataset_customer_reviews",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dataset_customer_reviews_azure_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "restructured_pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/prep_Products')]",
				"[concat(variables('factoryId'), '/datasets/Prep_ProductsRefined')]",
				"[concat(variables('factoryId'), '/datasets/dataset_lenskart_customers_csv')]",
				"[concat(variables('factoryId'), '/datasets/customer_data_to_sql')]",
				"[concat(variables('factoryId'), '/datasets/transaction_data_from_csv')]",
				"[concat(variables('factoryId'), '/datasets/transaction_data_to_sql')]",
				"[concat(variables('factoryId'), '/datasets/dataset_customer_reviews')]",
				"[concat(variables('factoryId'), '/datasets/dataset_customer_reviews_azure_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data-cleansing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CleansingSink",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Cleansing",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProductDetails": {},
									"Transactions": {},
									"ProductRefined": {},
									"TransactionsFined": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Cleansing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/data-cleansing_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CleansingSink",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Cleansing",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProductDetails": {},
									"Transactions": {},
									"ProductRefined": {},
									"TransactionsFined": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "restructured_pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Cleansing')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/facts_dim_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "facts_dim_creation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "facts_dimentsion_creation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"DimensionProducts": {},
									"DimensionsCustomers": {},
									"sink1": {},
									"dimProducts": {},
									"dimCustomerSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "restructured_pipeline"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/facts_dimentsion_creation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/insights-pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Arjun_Dataflow",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Arjun_Dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"productRefined": {},
									"transactionRefined": {},
									"BestProductBasedOnReview": {},
									"BestCategoryBasedOnReview": {},
									"ProductsDeletedFromLensKart": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "manan-om",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_manan_om",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Products": {},
									"Transactions": {},
									"ProductsRevenueHigh": {},
									"Customers": {},
									"products1": {},
									"Transactions1": {},
									"Transactions2": {},
									"SoldTotalQtyCategoryby": {},
									"RevenuePerCategory": {},
									"RevenuePerProduct": {},
									"TotalRevenuePerYear": {},
									"MonthlyRevenue": {},
									"RevenueByMonthPerYear": {},
									"TotalProductPerYear": {},
									"MostLoyalCustomer": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Karthickashwin_dataflow",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "mohana",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "mohana",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProuctSource": {},
									"TopSellingBrandOnCount": {},
									"totalSaleOfBrands": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Pramod_Dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Pramod_Dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"transactionsRefined": {},
									"ProductsRefined": {},
									"transactionsRefined1": {},
									"ProductsRefined1": {},
									"transactionsRefined2": {},
									"ProductsRefined2": {},
									"SalesbyYear": {},
									"SalesbyMonth": {},
									"MaxSalesinMonthandYear": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "brandWithPurchasedCount",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "brandWithPurchasedCount",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"productSource": {},
									"txnSource": {},
									"ClassificationSoldCount": {},
									"brandWithPurchasedCount": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CustomerReviewsandWishcount",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Om2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Product": {},
									"CustomerReviews": {},
									"HighestWishlistCount": {},
									"CustomerReviewsUsingProductId": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Arjun_Dataflow')]",
				"[concat(variables('factoryId'), '/dataflows/df_manan_om')]",
				"[concat(variables('factoryId'), '/dataflows/mohana')]",
				"[concat(variables('factoryId'), '/dataflows/Pramod_Dataflow')]",
				"[concat(variables('factoryId'), '/dataflows/brandWithPurchasedCount')]",
				"[concat(variables('factoryId'), '/dataflows/Om2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/master-pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ingestion",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "data- ingestion",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "data-cleansing",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ingestion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "data-cleansing",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "insights-pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "data-cleansing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "insights-pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/data- ingestion')]",
				"[concat(variables('factoryId'), '/pipelines/data-cleansing')]",
				"[concat(variables('factoryId'), '/pipelines/insights-pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "KarthickAshwin_DataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Karthickashwin1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"finaloutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Karthickashwin1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "product_url",
						"type": "nvarchar"
					},
					{
						"name": "color",
						"type": "nvarchar"
					},
					{
						"name": "size",
						"type": "nvarchar"
					},
					{
						"name": "width",
						"type": "int",
						"precision": 10
					},
					{
						"name": "brand_name",
						"type": "nvarchar"
					},
					{
						"name": "brand_name_en",
						"type": "nvarchar"
					},
					{
						"name": "model_name",
						"type": "nvarchar"
					},
					{
						"name": "is_tbyb",
						"type": "bit"
					},
					{
						"name": "tags",
						"type": "nvarchar"
					},
					{
						"name": "is_ditto",
						"type": "bit"
					},
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "specifications",
						"type": "nvarchar"
					},
					{
						"name": "wishlistCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "purchaseCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "avgRating",
						"type": "int",
						"precision": 10
					},
					{
						"name": "totalNoOfRatings",
						"type": "int",
						"precision": 10
					},
					{
						"name": "hashtagList",
						"type": "nvarchar"
					},
					{
						"name": "offerName",
						"type": "nvarchar"
					},
					{
						"name": "cmsLinkIos",
						"type": "nvarchar"
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "subCollection",
						"type": "nvarchar"
					},
					{
						"name": "subCollectionId",
						"type": "nvarchar"
					},
					{
						"name": "isCygnusEnabled",
						"type": "bit"
					},
					{
						"name": "isCashbackApplicable",
						"type": "bit"
					},
					{
						"name": "searchProductName",
						"type": "nvarchar"
					},
					{
						"name": "Market_Price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Lenskart_Price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Discount_Percentage",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "prep",
					"table": "ProducrtsRefined2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "productQtyrevn"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BestCategoryBasedOnReview')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "BestCategoryBasedOnReview"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BestProductBasedOnReviewSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "BestProductBasedOnReview"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BestSellingBrand')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "BestsellingBrand"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CategoryMonthlyRevenue')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "CategoryMonthlyRevenue"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CategoryRevenueByMonthPerYear')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "CategoryRevenueByMonthPerYear"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CategoryYearlyRevenue')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "CategoryYearlyRevenue"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "first_name",
						"type": "nvarchar"
					},
					{
						"name": "last_name",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "phone_number",
						"type": "nvarchar"
					},
					{
						"name": "address",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CustomerReviewsUsingProductId')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "CustomerReviewsUsingProductId"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HighestWishlistCount')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "brand_name",
						"type": "nvarchar"
					},
					{
						"name": "model_name",
						"type": "nvarchar"
					},
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "wishlistCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "avgRating",
						"type": "int",
						"precision": 10
					},
					{
						"name": "totalNoOfRatings",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Lenskart_Price",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "Reports",
					"table": "MostWishedProduct"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Manan_Om')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "SoldTotalQtyByCategory"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaxRevenueMonthYear')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "MaxRevenue_Month_Year"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MostLoyalCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "MostLoyalCustomer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Prep_ProductsRefined')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_new",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "restructured_database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "product_url",
						"type": "nvarchar"
					},
					{
						"name": "color",
						"type": "nvarchar"
					},
					{
						"name": "size",
						"type": "nvarchar"
					},
					{
						"name": "width",
						"type": "int",
						"precision": 10
					},
					{
						"name": "brand_name",
						"type": "nvarchar"
					},
					{
						"name": "brand_name_en",
						"type": "nvarchar"
					},
					{
						"name": "model_name",
						"type": "nvarchar"
					},
					{
						"name": "is_tbyb",
						"type": "bit"
					},
					{
						"name": "tags",
						"type": "nvarchar"
					},
					{
						"name": "is_ditto",
						"type": "bit"
					},
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "specifications",
						"type": "nvarchar"
					},
					{
						"name": "wishlistCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "purchaseCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "avgRating",
						"type": "int",
						"precision": 10
					},
					{
						"name": "totalNoOfRatings",
						"type": "int",
						"precision": 10
					},
					{
						"name": "hashtagList",
						"type": "nvarchar"
					},
					{
						"name": "offerName",
						"type": "nvarchar"
					},
					{
						"name": "cmsLinkIos",
						"type": "nvarchar"
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "subCollection",
						"type": "nvarchar"
					},
					{
						"name": "subCollectionId",
						"type": "nvarchar"
					},
					{
						"name": "isCygnusEnabled",
						"type": "bit"
					},
					{
						"name": "isCashbackApplicable",
						"type": "bit"
					},
					{
						"name": "searchProductName",
						"type": "nvarchar"
					},
					{
						"name": "Market_Price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Lenskart_Price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Discount_Percentage",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "prep",
					"table": "ProductsRefined"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "product_url",
						"type": "nvarchar"
					},
					{
						"name": "color",
						"type": "nvarchar"
					},
					{
						"name": "size",
						"type": "nvarchar"
					},
					{
						"name": "width",
						"type": "nvarchar"
					},
					{
						"name": "brand_name",
						"type": "nvarchar"
					},
					{
						"name": "brand_name_en",
						"type": "nvarchar"
					},
					{
						"name": "model_name",
						"type": "nvarchar"
					},
					{
						"name": "is_tbyb",
						"type": "nvarchar"
					},
					{
						"name": "tags",
						"type": "nvarchar"
					},
					{
						"name": "is_ditto",
						"type": "nvarchar"
					},
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "specifications",
						"type": "nvarchar"
					},
					{
						"name": "wishlistCount",
						"type": "nvarchar"
					},
					{
						"name": "purchaseCount",
						"type": "nvarchar"
					},
					{
						"name": "avgRating",
						"type": "nvarchar"
					},
					{
						"name": "totalNoOfRatings",
						"type": "nvarchar"
					},
					{
						"name": "hashtagList",
						"type": "nvarchar"
					},
					{
						"name": "offerName",
						"type": "nvarchar"
					},
					{
						"name": "cmsLinkIos",
						"type": "nvarchar"
					},
					{
						"name": "qty",
						"type": "nvarchar"
					},
					{
						"name": "subCollection",
						"type": "nvarchar"
					},
					{
						"name": "subCollectionId",
						"type": "nvarchar"
					},
					{
						"name": "isCygnusEnabled",
						"type": "nvarchar"
					},
					{
						"name": "isCashbackApplicable",
						"type": "nvarchar"
					},
					{
						"name": "searchProductName",
						"type": "nvarchar"
					},
					{
						"name": "Market_Price",
						"type": "nvarchar"
					},
					{
						"name": "Lenskart_Price",
						"type": "nvarchar"
					},
					{
						"name": "Discount_Percentage",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "productDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductRefined_to_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_new",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "restructured_database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "product_url",
						"type": "nvarchar"
					},
					{
						"name": "color",
						"type": "nvarchar"
					},
					{
						"name": "size",
						"type": "nvarchar"
					},
					{
						"name": "width(in mm)",
						"type": "int",
						"precision": 10
					},
					{
						"name": "brand_name",
						"type": "nvarchar"
					},
					{
						"name": "brand_name_en",
						"type": "nvarchar"
					},
					{
						"name": "model_name",
						"type": "nvarchar"
					},
					{
						"name": "is_tbyb",
						"type": "bit"
					},
					{
						"name": "tags",
						"type": "nvarchar"
					},
					{
						"name": "is_ditto",
						"type": "bit"
					},
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "wishlistCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "purchaseCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "avgRating",
						"type": "int",
						"precision": 10
					},
					{
						"name": "totalNoOfRatings",
						"type": "int",
						"precision": 10
					},
					{
						"name": "hashtagList",
						"type": "nvarchar"
					},
					{
						"name": "offerName",
						"type": "nvarchar"
					},
					{
						"name": "cmsLinkIos",
						"type": "nvarchar"
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "subCollection",
						"type": "nvarchar"
					},
					{
						"name": "subCollectionId",
						"type": "nvarchar"
					},
					{
						"name": "isCygnusEnabled",
						"type": "bit"
					},
					{
						"name": "isCashbackApplicable",
						"type": "bit"
					},
					{
						"name": "searchProductName",
						"type": "nvarchar"
					},
					{
						"name": "Market_Price(INR)",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Lenskart_Price(INR)",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Discount_Percentage",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "prep",
					"table": "ProductsData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductsDeletedFromLenskart')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "ProductsDeletedFromLenskart"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductsRefined')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "product_url",
						"type": "nvarchar"
					},
					{
						"name": "color",
						"type": "nvarchar"
					},
					{
						"name": "size",
						"type": "nvarchar"
					},
					{
						"name": "width",
						"type": "int",
						"precision": 10
					},
					{
						"name": "brand_name",
						"type": "nvarchar"
					},
					{
						"name": "brand_name_en",
						"type": "nvarchar"
					},
					{
						"name": "model_name",
						"type": "nvarchar"
					},
					{
						"name": "is_tbyb",
						"type": "bit"
					},
					{
						"name": "tags",
						"type": "nvarchar"
					},
					{
						"name": "is_ditto",
						"type": "bit"
					},
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "specifications",
						"type": "nvarchar"
					},
					{
						"name": "wishlistCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "purchaseCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "avgRating",
						"type": "int",
						"precision": 10
					},
					{
						"name": "totalNoOfRatings",
						"type": "int",
						"precision": 10
					},
					{
						"name": "hashtagList",
						"type": "nvarchar"
					},
					{
						"name": "offerName",
						"type": "nvarchar"
					},
					{
						"name": "cmsLinkIos",
						"type": "nvarchar"
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "subCollection",
						"type": "nvarchar"
					},
					{
						"name": "subCollectionId",
						"type": "nvarchar"
					},
					{
						"name": "isCygnusEnabled",
						"type": "bit"
					},
					{
						"name": "isCashbackApplicable",
						"type": "bit"
					},
					{
						"name": "searchProductName",
						"type": "nvarchar"
					},
					{
						"name": "Market_Price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Lenskart_Price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Discount_Percentage",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "ProducrtsRefined2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PurchaseCount')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "PurchaseCount"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RevenueByMonthPerYear')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "RevenueByMonthPerYear"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sales_by_Month')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "Sales_by_Month"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TotalRevenuePerYear')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "TotalRevenuePerYear"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Transaction')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "product_id",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "nvarchar"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "transactions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransactionREfinedASQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "product_id",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "transaction_date",
						"type": "date"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "prep",
					"table": "TransactionsRefined"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/YearlyRevenue')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "YearlyRevenue"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/brandWithPurchasedCount')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "brandWithPurchasedCount"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/categorization')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "Categoryofproducts"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer_data_from_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_raw_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "restructured_database"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customers.csv",
						"folderPath": "data",
						"container": "lenskardata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_raw_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer_data_to_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_new",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "restructured_database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "first_name",
						"type": "nvarchar"
					},
					{
						"name": "last_name",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "phone_number",
						"type": "nvarchar"
					},
					{
						"name": "address",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "Customersdata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer_purchase_history')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "",
					"table": "newtable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customers_data_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_customer_reviews')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_raw_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "reviews_data.csv",
						"container": "lenskardata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_raw_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_customer_reviews_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "CustomerReviews"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_lenskart_customers_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_raw_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customers.csv",
						"container": "lenskardata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_raw_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_lenskart_raw_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_raw_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "final_data.csv",
						"container": "lenskardata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_raw_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_lenskart_transactions_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_raw_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "transactions.csv",
						"container": "lenskardata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_raw_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_productsRefined_transform')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "product_url",
						"type": "nvarchar"
					},
					{
						"name": "color",
						"type": "nvarchar"
					},
					{
						"name": "size",
						"type": "nvarchar"
					},
					{
						"name": "width",
						"type": "int",
						"precision": 10
					},
					{
						"name": "brand_name",
						"type": "nvarchar"
					},
					{
						"name": "brand_name_en",
						"type": "nvarchar"
					},
					{
						"name": "model_name",
						"type": "nvarchar"
					},
					{
						"name": "is_tbyb",
						"type": "bit"
					},
					{
						"name": "tags",
						"type": "nvarchar"
					},
					{
						"name": "is_ditto",
						"type": "bit"
					},
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "specifications",
						"type": "nvarchar"
					},
					{
						"name": "wishlistCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "purchaseCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "avgRating",
						"type": "int",
						"precision": 10
					},
					{
						"name": "totalNoOfRatings",
						"type": "int",
						"precision": 10
					},
					{
						"name": "hashtagList",
						"type": "nvarchar"
					},
					{
						"name": "offerName",
						"type": "nvarchar"
					},
					{
						"name": "cmsLinkIos",
						"type": "nvarchar"
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "subCollection",
						"type": "nvarchar"
					},
					{
						"name": "subCollectionId",
						"type": "nvarchar"
					},
					{
						"name": "isCygnusEnabled",
						"type": "bit"
					},
					{
						"name": "isCashbackApplicable",
						"type": "bit"
					},
					{
						"name": "searchProductName",
						"type": "nvarchar"
					},
					{
						"name": "Market_Price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Lenskart_Price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Discount_Percentage",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "prep",
					"table": "ProducrtsRefined2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataset_transactionRefiendSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "product_id",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "transaction_date",
						"type": "date"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "prep",
					"table": "TransactionsRefined"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_customer_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_new",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dim",
					"table": "customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dim_products_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_new",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dim",
					"table": "products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/facts_ds_transaction_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_new",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "facts",
					"table": "transaction"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/metrics_sink_curated_retain_customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_new",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "curated",
					"table": "retain_customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prep_Products')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "product_url",
						"type": "nvarchar"
					},
					{
						"name": "color",
						"type": "nvarchar"
					},
					{
						"name": "size",
						"type": "nvarchar"
					},
					{
						"name": "width",
						"type": "int",
						"precision": 10
					},
					{
						"name": "brand_name",
						"type": "nvarchar"
					},
					{
						"name": "brand_name_en",
						"type": "nvarchar"
					},
					{
						"name": "model_name",
						"type": "nvarchar"
					},
					{
						"name": "is_tbyb",
						"type": "bit"
					},
					{
						"name": "tags",
						"type": "nvarchar"
					},
					{
						"name": "is_ditto",
						"type": "bit"
					},
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "specifications",
						"type": "nvarchar"
					},
					{
						"name": "wishlistCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "purchaseCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "avgRating",
						"type": "int",
						"precision": 10
					},
					{
						"name": "totalNoOfRatings",
						"type": "int",
						"precision": 10
					},
					{
						"name": "hashtagList",
						"type": "nvarchar"
					},
					{
						"name": "offerName",
						"type": "nvarchar"
					},
					{
						"name": "cmsLinkIos",
						"type": "nvarchar"
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "subCollection",
						"type": "nvarchar"
					},
					{
						"name": "subCollectionId",
						"type": "nvarchar"
					},
					{
						"name": "isCygnusEnabled",
						"type": "bit"
					},
					{
						"name": "isCashbackApplicable",
						"type": "bit"
					},
					{
						"name": "searchProductName",
						"type": "nvarchar"
					},
					{
						"name": "Market_Price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Lenskart_Price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Discount_Percentage",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "prep",
					"table": "ProducrtsRefined2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/productDataFromSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_new",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "image_url",
						"type": "nvarchar"
					},
					{
						"name": "image_url_suffix",
						"type": "nvarchar"
					},
					{
						"name": "imageUrls",
						"type": "nvarchar"
					},
					{
						"name": "product_url",
						"type": "nvarchar"
					},
					{
						"name": "color",
						"type": "nvarchar"
					},
					{
						"name": "size",
						"type": "nvarchar"
					},
					{
						"name": "width",
						"type": "nvarchar"
					},
					{
						"name": "brand_name",
						"type": "nvarchar"
					},
					{
						"name": "brand_name_en",
						"type": "nvarchar"
					},
					{
						"name": "brand_logo",
						"type": "nvarchar"
					},
					{
						"name": "model_name",
						"type": "nvarchar"
					},
					{
						"name": "prices",
						"type": "nvarchar"
					},
					{
						"name": "is_tbyb",
						"type": "nvarchar"
					},
					{
						"name": "tags",
						"type": "nvarchar"
					},
					{
						"name": "color_options",
						"type": "nvarchar"
					},
					{
						"name": "totalColorAvailable",
						"type": "nvarchar"
					},
					{
						"name": "is_ditto",
						"type": "nvarchar"
					},
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "specifications",
						"type": "nvarchar"
					},
					{
						"name": "wishlistCount",
						"type": "nvarchar"
					},
					{
						"name": "purchaseCount",
						"type": "nvarchar"
					},
					{
						"name": "avgRating",
						"type": "nvarchar"
					},
					{
						"name": "totalNoOfRatings",
						"type": "nvarchar"
					},
					{
						"name": "hashtagList",
						"type": "nvarchar"
					},
					{
						"name": "offerName",
						"type": "nvarchar"
					},
					{
						"name": "cmsLinkAndroid",
						"type": "nvarchar"
					},
					{
						"name": "cmsLinkIos",
						"type": "nvarchar"
					},
					{
						"name": "arModelAndroidUrl",
						"type": "nvarchar"
					},
					{
						"name": "arModelIOSUrl",
						"type": "nvarchar"
					},
					{
						"name": "arModelMsiteAndDesktopUrl",
						"type": "nvarchar"
					},
					{
						"name": "arModelOriginalUrl",
						"type": "nvarchar"
					},
					{
						"name": "qty",
						"type": "nvarchar"
					},
					{
						"name": "frameColorImage",
						"type": "nvarchar"
					},
					{
						"name": "subCollection",
						"type": "nvarchar"
					},
					{
						"name": "subCollectionId",
						"type": "nvarchar"
					},
					{
						"name": "relatedItems",
						"type": "nvarchar"
					},
					{
						"name": "isCygnusEnabled",
						"type": "nvarchar"
					},
					{
						"name": "isCashbackApplicable",
						"type": "nvarchar"
					},
					{
						"name": "searchProductName",
						"type": "nvarchar"
					},
					{
						"name": "prescriptionType",
						"type": "nvarchar"
					},
					{
						"name": "occasion",
						"type": "nvarchar"
					},
					{
						"name": "suited_for",
						"type": "nvarchar"
					},
					{
						"name": "inclusiveText",
						"type": "nvarchar"
					},
					{
						"name": "clUsage",
						"type": "nvarchar"
					},
					{
						"name": "tryOnImageUrl",
						"type": "nvarchar"
					},
					{
						"name": "offer_image",
						"type": "nvarchar"
					},
					{
						"name": "isCombo",
						"type": "nvarchar"
					},
					{
						"name": "comboImageUrl",
						"type": "nvarchar"
					},
					{
						"name": "comboDescription",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "ProductData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_raw_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "final_data.csv",
						"container": "lenskardata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "image_url",
						"type": "String"
					},
					{
						"name": "image_url_suffix",
						"type": "String"
					},
					{
						"name": "imageUrls",
						"type": "String"
					},
					{
						"name": "product_url",
						"type": "String"
					},
					{
						"name": "color",
						"type": "String"
					},
					{
						"name": "size",
						"type": "String"
					},
					{
						"name": "width",
						"type": "String"
					},
					{
						"name": "brand_name",
						"type": "String"
					},
					{
						"name": "brand_name_en",
						"type": "String"
					},
					{
						"name": "brand_logo",
						"type": "String"
					},
					{
						"name": "model_name",
						"type": "String"
					},
					{
						"name": "is_tbyb",
						"type": "String"
					},
					{
						"name": "tags",
						"type": "String"
					},
					{
						"name": "color_options",
						"type": "String"
					},
					{
						"name": "totalColorAvailable",
						"type": "String"
					},
					{
						"name": "is_ditto",
						"type": "String"
					},
					{
						"name": "classification",
						"type": "String"
					},
					{
						"name": "specifications",
						"type": "String"
					},
					{
						"name": "wishlistCount",
						"type": "String"
					},
					{
						"name": "purchaseCount",
						"type": "String"
					},
					{
						"name": "avgRating",
						"type": "String"
					},
					{
						"name": "totalNoOfRatings",
						"type": "String"
					},
					{
						"name": "hashtagList",
						"type": "String"
					},
					{
						"name": "offerName",
						"type": "String"
					},
					{
						"name": "cmsLinkAndroid",
						"type": "String"
					},
					{
						"name": "cmsLinkIos",
						"type": "String"
					},
					{
						"name": "arModelAndroidUrl",
						"type": "String"
					},
					{
						"name": "arModelIOSUrl",
						"type": "String"
					},
					{
						"name": "arModelMsiteAndDesktopUrl",
						"type": "String"
					},
					{
						"name": "arModelOriginalUrl",
						"type": "String"
					},
					{
						"name": "qty",
						"type": "String"
					},
					{
						"name": "frameColorImage",
						"type": "String"
					},
					{
						"name": "subCollection",
						"type": "String"
					},
					{
						"name": "subCollectionId",
						"type": "String"
					},
					{
						"name": "relatedItems",
						"type": "String"
					},
					{
						"name": "isCygnusEnabled",
						"type": "String"
					},
					{
						"name": "isCashbackApplicable",
						"type": "String"
					},
					{
						"name": "searchProductName",
						"type": "String"
					},
					{
						"name": "prescriptionType",
						"type": "String"
					},
					{
						"name": "occasion",
						"type": "String"
					},
					{
						"name": "suited_for",
						"type": "String"
					},
					{
						"name": "inclusiveText",
						"type": "String"
					},
					{
						"name": "clUsage",
						"type": "String"
					},
					{
						"name": "tryOnImageUrl",
						"type": "String"
					},
					{
						"name": "offer_image",
						"type": "String"
					},
					{
						"name": "isCombo",
						"type": "String"
					},
					{
						"name": "comboImageUrl",
						"type": "String"
					},
					{
						"name": "comboDescription",
						"type": "String"
					},
					{
						"name": "Market_Price",
						"type": "String"
					},
					{
						"name": "Lenskart_Price",
						"type": "String"
					},
					{
						"name": "Discount_Percentage",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_raw_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_data_from_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_raw_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "restructured_database"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "final_data.csv",
						"folderPath": "data",
						"container": "lenskardata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_raw_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_data_from_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_new",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "restructured_database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "image_url",
						"type": "nvarchar"
					},
					{
						"name": "image_url_suffix",
						"type": "nvarchar"
					},
					{
						"name": "imageUrls",
						"type": "nvarchar"
					},
					{
						"name": "product_url",
						"type": "nvarchar"
					},
					{
						"name": "color",
						"type": "nvarchar"
					},
					{
						"name": "size",
						"type": "nvarchar"
					},
					{
						"name": "width",
						"type": "nvarchar"
					},
					{
						"name": "brand_name",
						"type": "nvarchar"
					},
					{
						"name": "brand_name_en",
						"type": "nvarchar"
					},
					{
						"name": "brand_logo",
						"type": "nvarchar"
					},
					{
						"name": "model_name",
						"type": "nvarchar"
					},
					{
						"name": "is_tbyb",
						"type": "nvarchar"
					},
					{
						"name": "tags",
						"type": "nvarchar"
					},
					{
						"name": "color_options",
						"type": "nvarchar"
					},
					{
						"name": "totalColorAvailable",
						"type": "nvarchar"
					},
					{
						"name": "is_ditto",
						"type": "nvarchar"
					},
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "specifications",
						"type": "nvarchar"
					},
					{
						"name": "wishlistCount",
						"type": "nvarchar"
					},
					{
						"name": "purchaseCount",
						"type": "nvarchar"
					},
					{
						"name": "avgRating",
						"type": "nvarchar"
					},
					{
						"name": "totalNoOfRatings",
						"type": "nvarchar"
					},
					{
						"name": "hashtagList",
						"type": "nvarchar"
					},
					{
						"name": "offerName",
						"type": "nvarchar"
					},
					{
						"name": "cmsLinkAndroid",
						"type": "nvarchar"
					},
					{
						"name": "cmsLinkIos",
						"type": "nvarchar"
					},
					{
						"name": "arModelAndroidUrl",
						"type": "nvarchar"
					},
					{
						"name": "arModelIOSUrl",
						"type": "nvarchar"
					},
					{
						"name": "arModelMsiteAndDesktopUrl",
						"type": "nvarchar"
					},
					{
						"name": "arModelOriginalUrl",
						"type": "nvarchar"
					},
					{
						"name": "qty",
						"type": "nvarchar"
					},
					{
						"name": "frameColorImage",
						"type": "nvarchar"
					},
					{
						"name": "subCollection",
						"type": "nvarchar"
					},
					{
						"name": "subCollectionId",
						"type": "nvarchar"
					},
					{
						"name": "relatedItems",
						"type": "nvarchar"
					},
					{
						"name": "isCygnusEnabled",
						"type": "nvarchar"
					},
					{
						"name": "isCashbackApplicable",
						"type": "nvarchar"
					},
					{
						"name": "searchProductName",
						"type": "nvarchar"
					},
					{
						"name": "prescriptionType",
						"type": "nvarchar"
					},
					{
						"name": "occasion",
						"type": "nvarchar"
					},
					{
						"name": "suited_for",
						"type": "nvarchar"
					},
					{
						"name": "inclusiveText",
						"type": "nvarchar"
					},
					{
						"name": "clUsage",
						"type": "nvarchar"
					},
					{
						"name": "tryOnImageUrl",
						"type": "nvarchar"
					},
					{
						"name": "offer_image",
						"type": "nvarchar"
					},
					{
						"name": "isCombo",
						"type": "nvarchar"
					},
					{
						"name": "comboImageUrl",
						"type": "nvarchar"
					},
					{
						"name": "comboDescription",
						"type": "nvarchar"
					},
					{
						"name": "Market_Price",
						"type": "nvarchar"
					},
					{
						"name": "Lenskart_Price",
						"type": "nvarchar"
					},
					{
						"name": "Discount_Percentage",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "ProductData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_data_to_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_new",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "restructured_database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "ProductData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_details_casted')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_raw_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "lenskardata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_raw_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/productas')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "product_url",
						"type": "nvarchar"
					},
					{
						"name": "color",
						"type": "nvarchar"
					},
					{
						"name": "size",
						"type": "nvarchar"
					},
					{
						"name": "width",
						"type": "int",
						"precision": 10
					},
					{
						"name": "brand_name",
						"type": "nvarchar"
					},
					{
						"name": "brand_name_en",
						"type": "nvarchar"
					},
					{
						"name": "model_name",
						"type": "nvarchar"
					},
					{
						"name": "is_tbyb",
						"type": "nvarchar"
					},
					{
						"name": "tags",
						"type": "nvarchar"
					},
					{
						"name": "is_ditto",
						"type": "nvarchar"
					},
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "specifications",
						"type": "nvarchar"
					},
					{
						"name": "wishlistCount",
						"type": "nvarchar"
					},
					{
						"name": "purchaseCount",
						"type": "nvarchar"
					},
					{
						"name": "avgRating",
						"type": "nvarchar"
					},
					{
						"name": "totalNoOfRatings",
						"type": "nvarchar"
					},
					{
						"name": "hashtagList",
						"type": "nvarchar"
					},
					{
						"name": "offerName",
						"type": "nvarchar"
					},
					{
						"name": "cmsLinkIos",
						"type": "nvarchar"
					},
					{
						"name": "qty",
						"type": "nvarchar"
					},
					{
						"name": "subCollection",
						"type": "nvarchar"
					},
					{
						"name": "subCollectionId",
						"type": "nvarchar"
					},
					{
						"name": "isCygnusEnabled",
						"type": "nvarchar"
					},
					{
						"name": "isCashbackApplicable",
						"type": "nvarchar"
					},
					{
						"name": "searchProductName",
						"type": "nvarchar"
					},
					{
						"name": "Market_Price",
						"type": "nvarchar"
					},
					{
						"name": "Lenskart_Price",
						"type": "nvarchar"
					},
					{
						"name": "Discount_Percentage",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "prep",
					"table": "ProducrtsRefined2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/productsRefinedAZuresA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "prep",
					"table": "ProducrtsRefined2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "first_name",
						"type": "nvarchar"
					},
					{
						"name": "last_name",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "phone_number",
						"type": "nvarchar"
					},
					{
						"name": "address",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_data_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "productDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_productDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "product_url",
						"type": "nvarchar"
					},
					{
						"name": "color",
						"type": "nvarchar"
					},
					{
						"name": "size",
						"type": "nvarchar"
					},
					{
						"name": "width",
						"type": "nvarchar"
					},
					{
						"name": "brand_name",
						"type": "nvarchar"
					},
					{
						"name": "brand_name_en",
						"type": "nvarchar"
					},
					{
						"name": "model_name",
						"type": "nvarchar"
					},
					{
						"name": "is_tbyb",
						"type": "nvarchar"
					},
					{
						"name": "tags",
						"type": "nvarchar"
					},
					{
						"name": "is_ditto",
						"type": "nvarchar"
					},
					{
						"name": "classification",
						"type": "nvarchar"
					},
					{
						"name": "specifications",
						"type": "nvarchar"
					},
					{
						"name": "wishlistCount",
						"type": "nvarchar"
					},
					{
						"name": "purchaseCount",
						"type": "nvarchar"
					},
					{
						"name": "avgRating",
						"type": "nvarchar"
					},
					{
						"name": "totalNoOfRatings",
						"type": "nvarchar"
					},
					{
						"name": "hashtagList",
						"type": "nvarchar"
					},
					{
						"name": "offerName",
						"type": "nvarchar"
					},
					{
						"name": "cmsLinkIos",
						"type": "nvarchar"
					},
					{
						"name": "qty",
						"type": "nvarchar"
					},
					{
						"name": "subCollection",
						"type": "nvarchar"
					},
					{
						"name": "subCollectionId",
						"type": "nvarchar"
					},
					{
						"name": "isCygnusEnabled",
						"type": "nvarchar"
					},
					{
						"name": "isCashbackApplicable",
						"type": "nvarchar"
					},
					{
						"name": "searchProductName",
						"type": "nvarchar"
					},
					{
						"name": "Market_Price",
						"type": "nvarchar"
					},
					{
						"name": "Lenskart_Price",
						"type": "nvarchar"
					},
					{
						"name": "Discount_Percentage",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "productDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_productRefined')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "ProductsRefined"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_stores_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "raw_stores_data"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/reports_classificationSold')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "ClaasificationSold"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/reports_productREvenueQtyDetails')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "ProductRevenueQtyDetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/reports_sales_by_year')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "Sales_by_Year"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/revenuemonth')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "RevenueByMonth"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stores_data_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_raw_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "all_store.csv",
						"container": "lenskardata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "flag",
						"type": "String"
					},
					{
						"name": "lk_store_id",
						"type": "String"
					},
					{
						"name": "store",
						"type": "String"
					},
					{
						"name": "si_store_id",
						"type": "String"
					},
					{
						"name": "alt_store_name_catch",
						"type": "String"
					},
					{
						"name": "status",
						"type": "String"
					},
					{
						"name": "store_open_status",
						"type": "String"
					},
					{
						"name": "store_pickup_available",
						"type": "String"
					},
					{
						"name": "brand_lk_jj",
						"type": "String"
					},
					{
						"name": "store_type_labels",
						"type": "String"
					},
					{
						"name": "location_type_labels",
						"type": "String"
					},
					{
						"name": "address_full",
						"type": "String"
					},
					{
						"name": "address_line_1",
						"type": "String"
					},
					{
						"name": "address_line_2",
						"type": "String"
					},
					{
						"name": "address_locality",
						"type": "String"
					},
					{
						"name": "address_landmark",
						"type": "String"
					},
					{
						"name": "address_city",
						"type": "String"
					},
					{
						"name": "address_state",
						"type": "String"
					},
					{
						"name": "address_pin_code",
						"type": "String"
					},
					{
						"name": "address_country",
						"type": "String"
					},
					{
						"name": "latitude",
						"type": "String"
					},
					{
						"name": "longitude",
						"type": "String"
					},
					{
						"name": "wp_db_id",
						"type": "String"
					},
					{
						"name": "place_id",
						"type": "String"
					},
					{
						"name": "google_cid_g",
						"type": "String"
					},
					{
						"name": "flaberry_place_id_ur",
						"type": "String"
					},
					{
						"name": "fb_page_id",
						"type": "String"
					},
					{
						"name": "appointment_url",
						"type": "String"
					},
					{
						"name": "store_email",
						"type": "String"
					},
					{
						"name": "store_virtual_number",
						"type": "String"
					},
					{
						"name": "store_phone",
						"type": "String"
					},
					{
						"name": "business_hours_openi",
						"type": "String"
					},
					{
						"name": "business_hours_closi",
						"type": "String"
					},
					{
						"name": "store_manager_name",
						"type": "String"
					},
					{
						"name": "store_manager_mobile",
						"type": "String"
					},
					{
						"name": "payment_types",
						"type": "String"
					},
					{
						"name": "parking_options",
						"type": "String"
					},
					{
						"name": "store_opening_date",
						"type": "String"
					},
					{
						"name": "store_size",
						"type": "String"
					},
					{
						"name": "single_interface_sto",
						"type": "String"
					},
					{
						"name": "slug",
						"type": "String"
					},
					{
						"name": "lenskart_store_page_",
						"type": "String"
					},
					{
						"name": "google_maps_url",
						"type": "String"
					},
					{
						"name": "google_search_url",
						"type": "String"
					},
					{
						"name": "google_review_url",
						"type": "String"
					},
					{
						"name": "bing",
						"type": "String"
					},
					{
						"name": "foursquare_url",
						"type": "String"
					},
					{
						"name": "yalwa_url",
						"type": "String"
					},
					{
						"name": "dealsnyou_url",
						"type": "String"
					},
					{
						"name": "magicpin_url",
						"type": "String"
					},
					{
						"name": "review_short_url",
						"type": "String"
					},
					{
						"name": "map_short_url",
						"type": "String"
					},
					{
						"name": "from_the_brand",
						"type": "String"
					},
					{
						"name": "labels",
						"type": "String"
					},
					{
						"name": "busy_hours",
						"type": "String"
					},
					{
						"name": "slightly_hours",
						"type": "String"
					},
					{
						"name": "serviceOptions",
						"type": "String"
					},
					{
						"name": "store_front_image",
						"type": "String"
					},
					{
						"name": "is_union_territory",
						"type": "String"
					},
					{
						"name": "created_at",
						"type": "String"
					},
					{
						"name": "updated_at",
						"type": "String"
					},
					{
						"name": "running_status",
						"type": "String"
					},
					{
						"name": "ratingAndReviewCount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_raw_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/total_sale_of_brands')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Reports",
					"table": "total_sale_of_brands"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transactionRefined_to_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_new",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "restructured_database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "product_id",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "transaction_date",
						"type": "date"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "prep",
					"table": "transactionRefined"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transaction_data_from_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_raw_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "restructured_database"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "transactions.csv",
						"folderPath": "data",
						"container": "lenskardata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_raw_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transaction_data_to_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_new",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "restructured_database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "raw",
					"table": "Transaction"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transactionrefined')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "product_id",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "transaction_date",
						"type": "date"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "TransactionsRefined"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transactions_data_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azure_sql_lenskart_db",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "product_id",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "nvarchar"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "transactions"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azure_sql_lenskart_db')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/transactions_from_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_lenskart_new",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "restructured_database"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "nvarchar"
					},
					{
						"name": "product_id",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "nvarchar"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "raw",
					"table": "Transaction"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azure_sql_lenskart_db')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_azure_sql_lenskart_db_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_lenskart_new')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_lenskart_new_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_lenskart_raw_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_lenskart_raw_blob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Arjun_Dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_productsRefined_transform",
								"type": "DatasetReference"
							},
							"name": "productRefined"
						},
						{
							"dataset": {
								"referenceName": "TransactionREfinedASQL",
								"type": "DatasetReference"
							},
							"name": "transactionRefined"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "BestProductBasedOnReviewSQL",
								"type": "DatasetReference"
							},
							"name": "BestProductBasedOnReview"
						},
						{
							"dataset": {
								"referenceName": "BestCategoryBasedOnReview",
								"type": "DatasetReference"
							},
							"name": "BestCategoryBasedOnReview"
						},
						{
							"dataset": {
								"referenceName": "ProductsDeletedFromLenskart",
								"type": "DatasetReference"
							},
							"name": "ProductsDeletedFromLensKart"
						}
					],
					"transformations": [
						{
							"name": "sort1"
						},
						{
							"name": "averageReviewValue"
						},
						{
							"name": "sortAvgRating"
						},
						{
							"name": "groupByProductID"
						},
						{
							"name": "TRjoinPR"
						},
						{
							"name": "nullValuesSplit"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as integer,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          is_tbyb as boolean,",
						"          tags as string,",
						"          is_ditto as boolean,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as integer,",
						"          purchaseCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkIos as string,",
						"          qty as integer,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          isCygnusEnabled as boolean,",
						"          isCashbackApplicable as boolean,",
						"          searchProductName as string,",
						"          Market_Price as integer,",
						"          Lenskart_Price as integer,",
						"          Discount_Percentage as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> productRefined",
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as integer,",
						"          transaction_date as date,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> transactionRefined",
						"productRefined sort(desc(avgRating, true)) ~> sort1",
						"productRefined aggregate(groupBy(classification),",
						"     avgRating = avg(avgRating)) ~> averageReviewValue",
						"averageReviewValue sort(desc(avgRating, true)) ~> sortAvgRating",
						"transactionRefined aggregate(groupBy(product_id),",
						"     quantity = sum(quantity)) ~> groupByProductID",
						"groupByProductID, productRefined join(product_id == id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> TRjoinPR",
						"TRjoinPR split(isNull(id),",
						"     disjoint: true) ~> nullValuesSplit@(nullVals, nonNullVals)",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id,",
						"          product_url,",
						"          color,",
						"          size,",
						"          width,",
						"          brand_name_en,",
						"          model_name,",
						"          classification,",
						"          avgRating,",
						"          searchProductName,",
						"          Market_Price,",
						"          Lenskart_Price,",
						"          Discount_Percentage",
						"     )) ~> BestProductBasedOnReview",
						"sortAvgRating sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> BestCategoryBasedOnReview",
						"nullValuesSplit@nullVals sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          product_id",
						"     )) ~> ProductsDeletedFromLensKart"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_productsRefined_transform')]",
				"[concat(variables('factoryId'), '/datasets/TransactionREfinedASQL')]",
				"[concat(variables('factoryId'), '/datasets/BestProductBasedOnReviewSQL')]",
				"[concat(variables('factoryId'), '/datasets/BestCategoryBasedOnReview')]",
				"[concat(variables('factoryId'), '/datasets/ProductsDeletedFromLenskart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cleansing')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "product_data_from_sql",
								"type": "DatasetReference"
							},
							"name": "ProductDetails"
						},
						{
							"dataset": {
								"referenceName": "transactions_from_sql",
								"type": "DatasetReference"
							},
							"name": "Transactions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ProductRefined_to_sql",
								"type": "DatasetReference"
							},
							"name": "ProductRefined"
						},
						{
							"dataset": {
								"referenceName": "transactionRefined_to_sql",
								"type": "DatasetReference"
							},
							"name": "TransactionsFined"
						}
					],
					"transformations": [
						{
							"name": "TypeCasting"
						},
						{
							"name": "WidthInMM"
						},
						{
							"name": "TypeCastingDateQty"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          image_url as string,",
						"          image_url_suffix as string,",
						"          imageUrls as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as string,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          brand_logo as string,",
						"          model_name as string,",
						"          is_tbyb as string,",
						"          tags as string,",
						"          color_options as string,",
						"          totalColorAvailable as string,",
						"          is_ditto as string,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as string,",
						"          purchaseCount as string,",
						"          avgRating as string,",
						"          totalNoOfRatings as string,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkAndroid as string,",
						"          cmsLinkIos as string,",
						"          arModelAndroidUrl as string,",
						"          arModelIOSUrl as string,",
						"          arModelMsiteAndDesktopUrl as string,",
						"          arModelOriginalUrl as string,",
						"          qty as string,",
						"          frameColorImage as string,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          relatedItems as string,",
						"          isCygnusEnabled as string,",
						"          isCashbackApplicable as string,",
						"          searchProductName as string,",
						"          prescriptionType as string,",
						"          occasion as string,",
						"          suited_for as string,",
						"          inclusiveText as string,",
						"          clUsage as string,",
						"          tryOnImageUrl as string,",
						"          offer_image as string,",
						"          isCombo as string,",
						"          comboImageUrl as string,",
						"          comboDescription as string,",
						"          Market_Price as string,",
						"          Lenskart_Price as string,",
						"          Discount_Percentage as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductDetails",
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as string,",
						"          transaction_date as string,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Transactions",
						"WidthInMM cast(output(",
						"          id as string,",
						"          image_url as string,",
						"          image_url_suffix as string,",
						"          imageUrls as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as integer,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          brand_logo as string,",
						"          model_name as string,",
						"          is_tbyb as boolean,",
						"          tags as string,",
						"          color_options as string,",
						"          totalColorAvailable as string,",
						"          is_ditto as boolean,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as integer,",
						"          purchaseCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkAndroid as string,",
						"          cmsLinkIos as string,",
						"          arModelAndroidUrl as string,",
						"          arModelIOSUrl as string,",
						"          arModelMsiteAndDesktopUrl as string,",
						"          arModelOriginalUrl as string,",
						"          qty as integer,",
						"          frameColorImage as string,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          relatedItems as string,",
						"          isCygnusEnabled as boolean,",
						"          isCashbackApplicable as boolean,",
						"          searchProductName as string,",
						"          prescriptionType as string,",
						"          occasion as string,",
						"          suited_for as string,",
						"          inclusiveText as string,",
						"          clUsage as string,",
						"          tryOnImageUrl as string,",
						"          offer_image as string,",
						"          isCombo as string,",
						"          comboImageUrl as string,",
						"          comboDescription as string,",
						"          Market_Price as integer,",
						"          Lenskart_Price as integer,",
						"          Discount_Percentage as integer",
						"     ),",
						"     errors: true) ~> TypeCasting",
						"ProductDetails derive(width = replace(width, 'mm', '')) ~> WidthInMM",
						"Transactions cast(output(",
						"          quantity as integer,",
						"          transaction_date as date",
						"     ),",
						"     errors: true) ~> TypeCastingDateQty",
						"TypeCasting sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          {width(in mm)} as integer,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          is_tbyb as boolean,",
						"          tags as string,",
						"          is_ditto as boolean,",
						"          classification as string,",
						"          wishlistCount as integer,",
						"          purchaseCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkIos as string,",
						"          qty as integer,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          isCygnusEnabled as boolean,",
						"          isCashbackApplicable as boolean,",
						"          searchProductName as string,",
						"          {Market_Price(INR)} as integer,",
						"          {Lenskart_Price(INR)} as integer,",
						"          Discount_Percentage as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id,",
						"          product_url,",
						"          color,",
						"          size,",
						"          {width(in mm)} = width,",
						"          brand_name,",
						"          brand_name_en,",
						"          model_name,",
						"          is_tbyb,",
						"          tags,",
						"          is_ditto,",
						"          classification,",
						"          wishlistCount,",
						"          purchaseCount,",
						"          avgRating,",
						"          totalNoOfRatings,",
						"          hashtagList,",
						"          offerName,",
						"          cmsLinkIos,",
						"          qty,",
						"          subCollection,",
						"          subCollectionId,",
						"          isCygnusEnabled,",
						"          isCashbackApplicable,",
						"          searchProductName,",
						"          {Market_Price(INR)} = Market_Price,",
						"          {Lenskart_Price(INR)} = Lenskart_Price,",
						"          Discount_Percentage",
						"     )) ~> ProductRefined",
						"TypeCastingDateQty sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as integer,",
						"          transaction_date as date,",
						"          transaction_id as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TransactionsFined"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/product_data_from_sql')]",
				"[concat(variables('factoryId'), '/datasets/transactions_from_sql')]",
				"[concat(variables('factoryId'), '/datasets/ProductRefined_to_sql')]",
				"[concat(variables('factoryId'), '/datasets/transactionRefined_to_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Karthickashwin1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Transaction",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "productas",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "categorization",
								"type": "DatasetReference"
							},
							"name": "finaloutput"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as string,",
						"          transaction_date as string,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          id as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as integer,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          is_tbyb as string,",
						"          tags as string,",
						"          is_ditto as string,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as string,",
						"          purchaseCount as string,",
						"          avgRating as string,",
						"          totalNoOfRatings as string,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkIos as string,",
						"          qty as string,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          isCygnusEnabled as string,",
						"          isCashbackApplicable as string,",
						"          searchProductName as string,",
						"          Market_Price as string,",
						"          Lenskart_Price as string,",
						"          Discount_Percentage as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1, source2 join(product_id == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 aggregate(groupBy(brand_name,",
						"          classification),",
						"     NoOfProduct = count(transaction_id)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> finaloutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Transaction')]",
				"[concat(variables('factoryId'), '/datasets/productas')]",
				"[concat(variables('factoryId'), '/datasets/categorization')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Om2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "prep_Products",
								"type": "DatasetReference"
							},
							"name": "Product"
						},
						{
							"dataset": {
								"referenceName": "dataset_customer_reviews_azure_sql",
								"type": "DatasetReference"
							},
							"name": "CustomerReviews"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "HighestWishlistCount",
								"type": "DatasetReference"
							},
							"name": "HighestWishlistCount"
						},
						{
							"dataset": {
								"referenceName": "CustomerReviewsUsingProductId",
								"type": "DatasetReference"
							},
							"name": "CustomerReviewsUsingProductId"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "JoiningProductDetails"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as integer,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          is_tbyb as boolean,",
						"          tags as string,",
						"          is_ditto as boolean,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as integer,",
						"          purchaseCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkIos as string,",
						"          qty as integer,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          isCygnusEnabled as boolean,",
						"          isCashbackApplicable as boolean,",
						"          searchProductName as string,",
						"          Market_Price as integer,",
						"          Lenskart_Price as integer,",
						"          Discount_Percentage as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Product",
						"source(output(",
						"          productId as integer,",
						"          reviewee as string,",
						"          noOfStars as integer,",
						"          reviewDetail as string,",
						"          reviewDate as date,",
						"          reviewTitle as string,",
						"          reviewId as integer,",
						"          reviewerType as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CustomerReviews",
						"Product select(mapColumn(",
						"          id,",
						"          classification,",
						"          brand_name,",
						"          model_name,",
						"          wishlistCount,",
						"          purchaseCount,",
						"          avgRating,",
						"          Lenskart_Price,",
						"          product_url",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sort(desc(wishlistCount, true)) ~> sort1",
						"CustomerReviews, Product join(productId == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoiningProductDetails",
						"JoiningProductDetails select(mapColumn(",
						"          productId,",
						"          brand_name,",
						"          model_name,",
						"          reviewId,",
						"          reviewee,",
						"          reviewTitle,",
						"          reviewDetail,",
						"          noOfStars,",
						"          reviewDate,",
						"          reviewerType,",
						"          classification,",
						"          Lenskart_Price",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          brand_name as string,",
						"          model_name as string,",
						"          classification as string,",
						"          wishlistCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          Lenskart_Price as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> HighestWishlistCount",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CustomerReviewsUsingProductId"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/prep_Products')]",
				"[concat(variables('factoryId'), '/datasets/dataset_customer_reviews_azure_sql')]",
				"[concat(variables('factoryId'), '/datasets/HighestWishlistCount')]",
				"[concat(variables('factoryId'), '/datasets/CustomerReviewsUsingProductId')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pramod_Dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_transactionRefiendSQL",
								"type": "DatasetReference"
							},
							"name": "transactionsRefined"
						},
						{
							"dataset": {
								"referenceName": "dataset_productsRefined_transform",
								"type": "DatasetReference"
							},
							"name": "ProductsRefined"
						},
						{
							"dataset": {
								"referenceName": "dataset_transactionRefiendSQL",
								"type": "DatasetReference"
							},
							"name": "transactionsRefined1",
							"description": "Import data from dataset_transactionRefiendSQL"
						},
						{
							"dataset": {
								"referenceName": "dataset_productsRefined_transform",
								"type": "DatasetReference"
							},
							"name": "ProductsRefined1",
							"description": "Import data from dataset_productsRefined_transform"
						},
						{
							"dataset": {
								"referenceName": "dataset_transactionRefiendSQL",
								"type": "DatasetReference"
							},
							"name": "transactionsRefined2",
							"description": "Import data from dataset_transactionRefiendSQL"
						},
						{
							"dataset": {
								"referenceName": "dataset_productsRefined_transform",
								"type": "DatasetReference"
							},
							"name": "ProductsRefined2",
							"description": "Import data from dataset_productsRefined_transform"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "reports_sales_by_year",
								"type": "DatasetReference"
							},
							"name": "SalesbyYear",
							"description": "Sales_by_Year Table"
						},
						{
							"dataset": {
								"referenceName": "Sales_by_Month",
								"type": "DatasetReference"
							},
							"name": "SalesbyMonth",
							"description": "Sales_by_Month Table"
						},
						{
							"dataset": {
								"referenceName": "MaxRevenueMonthYear",
								"type": "DatasetReference"
							},
							"name": "MaxSalesinMonthandYear",
							"description": "Max Sales in Month and Year"
						}
					],
					"transformations": [
						{
							"name": "TransactionProductsJoin",
							"description": "Transaction table left join ProductsRefined"
						},
						{
							"name": "groupbyAndAggregates",
							"description": "Group by YEAR(transaction_date) and Aggregates"
						},
						{
							"name": "orderbysalesyear",
							"description": "Order By sales_year"
						},
						{
							"name": "TransactionProductsJoin1",
							"description": "Transaction table left join ProductsRefined"
						},
						{
							"name": "groupbyAndAggregates1",
							"description": "Group by YEAR(transaction_date) and Month(transaction_date) and Aggregates"
						},
						{
							"name": "orderbySalesYearAndMonth",
							"description": "orderby Sales_Year desc And Sales_Month"
						},
						{
							"name": "TransactionProductsJoin2",
							"description": "Transaction table left join ProductsRefined"
						},
						{
							"name": "groupby",
							"description": "Group by YEAR(transaction_date) and Month(transaction_date) and Aggregates"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "joingroupbyAaggregte1"
						},
						{
							"name": "orderbysalesyearDESC",
							"description": "ORDER BY  sales_year DESC"
						},
						{
							"name": "selectNecessaryFields",
							"description": "select with columns 'Sales_year,  sales_month, total_revenue, total_products_sold'"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as integer,",
						"          transaction_date as date,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> transactionsRefined",
						"source(output(",
						"          id as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as integer,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          is_tbyb as boolean,",
						"          tags as string,",
						"          is_ditto as boolean,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as integer,",
						"          purchaseCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkIos as string,",
						"          qty as integer,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          isCygnusEnabled as boolean,",
						"          isCashbackApplicable as boolean,",
						"          searchProductName as string,",
						"          Market_Price as integer,",
						"          Lenskart_Price as integer,",
						"          Discount_Percentage as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductsRefined",
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as integer,",
						"          transaction_date as date,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> transactionsRefined1",
						"source(output(",
						"          id as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as integer,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          is_tbyb as boolean,",
						"          tags as string,",
						"          is_ditto as boolean,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as integer,",
						"          purchaseCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkIos as string,",
						"          qty as integer,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          isCygnusEnabled as boolean,",
						"          isCashbackApplicable as boolean,",
						"          searchProductName as string,",
						"          Market_Price as integer,",
						"          Lenskart_Price as integer,",
						"          Discount_Percentage as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductsRefined1",
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as integer,",
						"          transaction_date as date,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> transactionsRefined2",
						"source(output(",
						"          id as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as integer,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          is_tbyb as boolean,",
						"          tags as string,",
						"          is_ditto as boolean,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as integer,",
						"          purchaseCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkIos as string,",
						"          qty as integer,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          isCygnusEnabled as boolean,",
						"          isCashbackApplicable as boolean,",
						"          searchProductName as string,",
						"          Market_Price as integer,",
						"          Lenskart_Price as integer,",
						"          Discount_Percentage as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductsRefined2",
						"transactionsRefined, ProductsRefined join(product_id == id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> TransactionProductsJoin",
						"TransactionProductsJoin aggregate(groupBy(Sales_year = year(transaction_date)),",
						"     Total_sales_amount = sum(quantity*Lenskart_Price),",
						"          Total_quantities_sold = sum(quantity),",
						"          total_transactions = count(transaction_id),",
						"          Total_customers = countDistinct(customer_id),",
						"          Total_products = countDistinct(product_id)) ~> groupbyAndAggregates",
						"groupbyAndAggregates sort(desc(Sales_year, true)) ~> orderbysalesyear",
						"transactionsRefined1, ProductsRefined1 join(product_id == id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> TransactionProductsJoin1",
						"TransactionProductsJoin1 aggregate(groupBy(Sales_year = year(transaction_date),",
						"          sales_month = month(transaction_date)),",
						"     Total_sales_amount = sum(quantity*Lenskart_Price),",
						"          Total_quantities_sold = sum(quantity),",
						"          total_transactions = count(transaction_id),",
						"          Total_customers = countDistinct(customer_id),",
						"          Total_products = countDistinct(product_id)) ~> groupbyAndAggregates1",
						"groupbyAndAggregates1 sort(desc(Sales_year, true),",
						"     asc(sales_month, true)) ~> orderbySalesYearAndMonth",
						"transactionsRefined2, ProductsRefined2 join(product_id == id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> TransactionProductsJoin2",
						"TransactionProductsJoin2 aggregate(groupBy(Sales_year = year(transaction_date),",
						"          sales_month = month(transaction_date)),",
						"     Total_sales_amount = sum(Lenskart_Price*quantity),",
						"          total_products_sold = countDistinct(product_id)) ~> groupby",
						"groupby aggregate(groupBy(Sales_year),",
						"     max_revenue = max(Total_sales_amount)) ~> aggregate1",
						"aggregate1, groupby join(aggregate1@Sales_year == groupby@Sales_year",
						"     && max_revenue == Total_sales_amount,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joingroupbyAaggregte1",
						"joingroupbyAaggregte1 sort(desc(groupby@Sales_year, true)) ~> orderbysalesyearDESC",
						"orderbysalesyearDESC select(mapColumn(",
						"          Sales_year = aggregate1@Sales_year,",
						"          sales_month,",
						"          total_revenue = Total_sales_amount,",
						"          total_products_sold",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectNecessaryFields",
						"orderbySalesYearAndMonth derive(sales_month = iif(sales_month==1, 'Jan',     iif(sales_month==2, 'Feb',         iif(sales_month==3, 'Mar',             iif(sales_month==4, 'Apr',                 iif(sales_month==5, 'May',                     iif(sales_month==6, 'Jun',                         iif(sales_month==7, 'Jul',                             iif(sales_month==8, 'Aug',                                 iif(sales_month==9, 'Sep',                                     iif(sales_month==10, 'Oct',                                         iif(sales_month==11, 'Nov',                                             iif(sales_month==12, 'Dec',                                                 'Invalid Month'                                             )                                         )                                     )                                 )                             )                         )                     )                 )             )         )     ) )) ~> derivedColumn1",
						"selectNecessaryFields derive(sales_month = iif(sales_month==1, 'Jan',     iif(sales_month==2, 'Feb',         iif(sales_month==3, 'Mar',             iif(sales_month==4, 'Apr',                 iif(sales_month==5, 'May',                     iif(sales_month==6, 'Jun',                         iif(sales_month==7, 'Jul',                             iif(sales_month==8, 'Aug',                                 iif(sales_month==9, 'Sep',                                     iif(sales_month==10, 'Oct',                                         iif(sales_month==11, 'Nov',                                             iif(sales_month==12, 'Dec',                                                 'Invalid Month'                                             )                                         )                                     )                                 )                             )                         )                     )                 )             )         )     ) )) ~> derivedColumn2",
						"orderbysalesyear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Sales_year,",
						"          Total_sales_amount,",
						"          Total_quantities_sold,",
						"          total_transactions,",
						"          Total_customers,",
						"          Total_products",
						"     )) ~> SalesbyYear",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SalesbyMonth",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MaxSalesinMonthandYear"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_transactionRefiendSQL')]",
				"[concat(variables('factoryId'), '/datasets/dataset_productsRefined_transform')]",
				"[concat(variables('factoryId'), '/datasets/reports_sales_by_year')]",
				"[concat(variables('factoryId'), '/datasets/Sales_by_Month')]",
				"[concat(variables('factoryId'), '/datasets/MaxRevenueMonthYear')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/brandWithPurchasedCount')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_productsRefined_transform",
								"type": "DatasetReference"
							},
							"name": "productSource"
						},
						{
							"dataset": {
								"referenceName": "transactionrefined",
								"type": "DatasetReference"
							},
							"name": "txnSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "reports_classificationSold",
								"type": "DatasetReference"
							},
							"name": "ClassificationSoldCount",
							"rejectedDataLinkedService": {
								"referenceName": "ls_lenskart_raw_blob",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "brandWithPurchasedCount",
								"type": "DatasetReference"
							},
							"name": "brandWithPurchasedCount"
						}
					],
					"transformations": [
						{
							"name": "ProductJoin"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "cast1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as integer,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          is_tbyb as boolean,",
						"          tags as string,",
						"          is_ditto as boolean,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as integer,",
						"          purchaseCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkIos as string,",
						"          qty as integer,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          isCygnusEnabled as boolean,",
						"          isCashbackApplicable as boolean,",
						"          searchProductName as string,",
						"          Market_Price as integer,",
						"          Lenskart_Price as integer,",
						"          Discount_Percentage as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> productSource",
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as integer,",
						"          transaction_date as date,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> txnSource",
						"productSource, txnSource join(id == product_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ProductJoin",
						"ProductJoin aggregate(groupBy(classification),",
						"     quantity_sold = sum(quantity)) ~> aggregate1",
						"cast1 filter(like(transaction_date,'2023%')) ~> filter1",
						"ProductJoin cast(output(",
						"          transaction_date as string",
						"     ),",
						"     errors: true) ~> cast1",
						"derivedColumn1 aggregate(groupBy(brand_name),",
						"     purchase_sum = sum(Lenskart_Price),",
						"          quantity = sum(quantity)) ~> aggregate2",
						"filter1 derive(transaction_date = substring(transaction_date,1,4)) ~> derivedColumn1",
						"aggregate2 sort(asc(purchase_sum, true)) ~> sort1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ClassificationSoldCount",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> brandWithPurchasedCount"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_productsRefined_transform')]",
				"[concat(variables('factoryId'), '/datasets/transactionrefined')]",
				"[concat(variables('factoryId'), '/datasets/reports_classificationSold')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_raw_blob')]",
				"[concat(variables('factoryId'), '/datasets/brandWithPurchasedCount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Customer",
								"type": "DatasetReference"
							},
							"name": "Customer"
						},
						{
							"dataset": {
								"referenceName": "customer_purchase_history",
								"type": "DatasetReference"
							},
							"name": "productspurchased"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "PurchaseCount",
								"type": "DatasetReference"
							},
							"name": "PurchaseCount",
							"description": "Based on customerid, we were able to get their purchase count"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          phone_number as string,",
						"          address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Customer",
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as string,",
						"          transaction_date as string,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> productspurchased",
						"Customer, productspurchased join(Customer@customer_id == productspurchased@customer_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          phone_number,",
						"          address,",
						"          product_id,",
						"          quantity,",
						"          transaction_date,",
						"          transaction_id",
						"     )) ~> PurchaseCount"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Customer')]",
				"[concat(variables('factoryId'), '/datasets/customer_purchase_history')]",
				"[concat(variables('factoryId'), '/datasets/PurchaseCount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_final_metric')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dim_customer_sink",
								"type": "DatasetReference"
							},
							"name": "dimCustomer"
						},
						{
							"dataset": {
								"referenceName": "dim_products_sink",
								"type": "DatasetReference"
							},
							"name": "dimProducts"
						},
						{
							"dataset": {
								"referenceName": "facts_ds_transaction_sql",
								"type": "DatasetReference"
							},
							"name": "factTransactions"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "metrics_sink_curated_retain_customer",
								"type": "DatasetReference"
							},
							"name": "retaningCustomer"
						}
					],
					"transformations": [
						{
							"name": "joiningCustomer"
						},
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "groupOnCustID"
						},
						{
							"name": "join1"
						},
						{
							"name": "getTotalRevenue"
						},
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          phone_number as string,",
						"          address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimCustomer",
						"source(output(",
						"          id as string,",
						"          color as string,",
						"          size as string,",
						"          {width(in mm)} as integer,",
						"          brand_name as string,",
						"          model_name as string,",
						"          classification as string,",
						"          wishlistCount as integer,",
						"          purchaseCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          offerName as string,",
						"          qty as integer,",
						"          searchProductName as string,",
						"          {Market_Price(INR)} as integer,",
						"          {Lenskart_Price(INR)} as integer,",
						"          Discount_Percentage as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> dimProducts",
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as integer,",
						"          transaction_date as date,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> factTransactions",
						"factTransactions, dimCustomer join(factTransactions@customer_id == dimCustomer@customer_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningCustomer",
						"join1 select(mapColumn(",
						"          customer_id = factTransactions@customer_id,",
						"          product_id,",
						"          quantity,",
						"          transaction_date,",
						"          transaction_id,",
						"          customer_id = dimCustomer@customer_id,",
						"          {Market_Price(INR)},",
						"          {Lenskart_Price(INR)},",
						"          Discount_Percentage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"joiningCustomer filter(notEquals(dimCustomer@customer_id, 'NULL')) ~> filter1",
						"getTotalRevenue aggregate(groupBy(customer_id),",
						"     totalRevenue = sum(totalRevenue)) ~> groupOnCustID",
						"filter1, dimProducts join(product_id == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"select1 derive(totalRevenue = multiply(quantity, {Lenskart_Price(INR)})) ~> getTotalRevenue",
						"groupOnCustID sort(asc(totalRevenue, true)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> retaningCustomer"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dim_customer_sink')]",
				"[concat(variables('factoryId'), '/datasets/dim_products_sink')]",
				"[concat(variables('factoryId'), '/datasets/facts_ds_transaction_sql')]",
				"[concat(variables('factoryId'), '/datasets/metrics_sink_curated_retain_customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_manan_om')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "Products"
						},
						{
							"dataset": {
								"referenceName": "transactionrefined",
								"type": "DatasetReference"
							},
							"name": "Transactions"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "ProductsRevenueHigh"
						},
						{
							"dataset": {
								"referenceName": "Customer",
								"type": "DatasetReference"
							},
							"name": "Customers"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "products1"
						},
						{
							"dataset": {
								"referenceName": "transactionrefined",
								"type": "DatasetReference"
							},
							"name": "Transactions1"
						},
						{
							"dataset": {
								"referenceName": "transactionrefined",
								"type": "DatasetReference"
							},
							"name": "Transactions2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Manan_Om",
								"type": "DatasetReference"
							},
							"name": "SoldTotalQtyCategoryby"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "RevenuePerCategory"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "RevenuePerProduct"
						},
						{
							"dataset": {
								"referenceName": "CategoryYearlyRevenue",
								"type": "DatasetReference"
							},
							"name": "TotalRevenuePerYear"
						},
						{
							"dataset": {
								"referenceName": "CategoryMonthlyRevenue",
								"type": "DatasetReference"
							},
							"name": "MonthlyRevenue"
						},
						{
							"dataset": {
								"referenceName": "CategoryRevenueByMonthPerYear",
								"type": "DatasetReference"
							},
							"name": "RevenueByMonthPerYear"
						},
						{
							"dataset": {
								"referenceName": "TotalRevenuePerYear",
								"type": "DatasetReference"
							},
							"name": "TotalProductPerYear"
						},
						{
							"dataset": {
								"referenceName": "MostLoyalCustomer",
								"type": "DatasetReference"
							},
							"name": "MostLoyalCustomer"
						}
					],
					"transformations": [
						{
							"name": "QtyofEachproduct"
						},
						{
							"name": "transaction"
						},
						{
							"name": "Categoryfield"
						},
						{
							"name": "SoldTotalQtyCategory"
						},
						{
							"name": "JoiningQtyProduct1"
						},
						{
							"name": "ptdQtyyDetails"
						},
						{
							"name": "derivedRevenue"
						},
						{
							"name": "SoldRevenueByCategory"
						},
						{
							"name": "JoiningQtyProduct2"
						},
						{
							"name": "NecessaryFields1"
						},
						{
							"name": "CountingNoOfProducts"
						},
						{
							"name": "QtyproductBought"
						},
						{
							"name": "JoiningQtyProducts3"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "ProductRevQty"
						},
						{
							"name": "joinProductDetail"
						},
						{
							"name": "NecessaryFieldsGroupByMonth"
						},
						{
							"name": "addYearMonth"
						},
						{
							"name": "addYearRevenue"
						},
						{
							"name": "CategoryMonthlyRevenue"
						},
						{
							"name": "TotalrevenueYearly"
						},
						{
							"name": "totalRevenueMonth"
						},
						{
							"name": "joiningProduct"
						},
						{
							"name": "NecessaryFields2"
						},
						{
							"name": "addYear",
							"description": "Creating/updating the columns 'quantity, Year'"
						},
						{
							"name": "TotalProductsPerYear"
						},
						{
							"name": "RevenueMonthYear"
						},
						{
							"name": "Sorting"
						},
						{
							"name": "Sorting1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as integer,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          is_tbyb as boolean,",
						"          tags as string,",
						"          is_ditto as boolean,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as integer,",
						"          purchaseCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkIos as string,",
						"          qty as integer,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          isCygnusEnabled as boolean,",
						"          isCashbackApplicable as boolean,",
						"          searchProductName as string,",
						"          Market_Price as integer,",
						"          Lenskart_Price as integer,",
						"          Discount_Percentage as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Products",
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as integer,",
						"          transaction_date as date,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Transactions",
						"source(output(",
						"          id as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as integer,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          is_tbyb as boolean,",
						"          tags as string,",
						"          is_ditto as boolean,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as integer,",
						"          purchaseCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkIos as string,",
						"          qty as integer,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          isCygnusEnabled as boolean,",
						"          isCashbackApplicable as boolean,",
						"          searchProductName as string,",
						"          Market_Price as integer,",
						"          Lenskart_Price as integer,",
						"          Discount_Percentage as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductsRevenueHigh",
						"source(output(",
						"          customer_id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          phone_number as string,",
						"          address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Customers",
						"source(output(",
						"          id as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as integer,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          is_tbyb as boolean,",
						"          tags as string,",
						"          is_ditto as boolean,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as integer,",
						"          purchaseCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkIos as string,",
						"          qty as integer,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          isCygnusEnabled as boolean,",
						"          isCashbackApplicable as boolean,",
						"          searchProductName as string,",
						"          Market_Price as integer,",
						"          Lenskart_Price as integer,",
						"          Discount_Percentage as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> products1",
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as integer,",
						"          transaction_date as date,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Transactions1",
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as integer,",
						"          transaction_date as date,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Transactions2",
						"Transactions aggregate(groupBy(product_id),",
						"     TotalQuantity = sum(quantity)) ~> QtyofEachproduct",
						"Products, QtyofEachproduct join(id == product_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> transaction",
						"transaction select(mapColumn(",
						"          classification,",
						"          TotalQuantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Categoryfield",
						"Categoryfield aggregate(groupBy(classification),",
						"     TotalQuantity = sum(TotalQuantity)) ~> SoldTotalQtyCategory",
						"ProductsRevenueHigh, QtyofEachproduct join(id == product_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoiningQtyProduct1",
						"JoiningQtyProduct1 select(mapColumn(",
						"          classification,",
						"          Lenskart_Price,",
						"          TotalQuantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ptdQtyyDetails",
						"ptdQtyyDetails derive(Revenue = Lenskart_Price*TotalQuantity) ~> derivedRevenue",
						"derivedRevenue aggregate(groupBy(classification),",
						"     TotalRevenue = sum(Revenue)) ~> SoldRevenueByCategory",
						"Customers, Transactions join(Customers@customer_id == Transactions@customer_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoiningQtyProduct2",
						"JoiningQtyProduct2 select(mapColumn(",
						"          customer_id = Transactions@customer_id,",
						"          first_name,",
						"          last_name,",
						"          email,",
						"          phone_number,",
						"          address,",
						"          product_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NecessaryFields1",
						"NecessaryFields1 aggregate(groupBy(customer_id,",
						"          first_name,",
						"          last_name,",
						"          phone_number),",
						"     No_of_Products = count(product_id)) ~> CountingNoOfProducts",
						"CountingNoOfProducts sort(desc(No_of_Products, true)) ~> QtyproductBought",
						"products1, QtyofEachproduct join(id == product_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoiningQtyProducts3",
						"JoiningQtyProducts3 select(mapColumn(",
						"          id,",
						"          product_url,",
						"          color,",
						"          size,",
						"          width,",
						"          brand_name,",
						"          Lenskart_Price,",
						"          TotalQuantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(TotalRevenue = Lenskart_Price*TotalQuantity) ~> derivedColumn2",
						"derivedColumn2 sort(desc(TotalQuantity, true)) ~> ProductRevQty",
						"Transactions1, Products join(product_id == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinProductDetail",
						"joinProductDetail select(mapColumn(",
						"          customer_id,",
						"          product_id,",
						"          quantity,",
						"          transaction_date,",
						"          brand_name,",
						"          Lenskart_Price,",
						"          classification",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NecessaryFieldsGroupByMonth",
						"NecessaryFieldsGroupByMonth derive(Revenue = quantity*Lenskart_Price,",
						"          Year = year(transaction_date),",
						"          Month = month(transaction_date)) ~> addYearMonth",
						"NecessaryFieldsGroupByMonth derive(Year = year(transaction_date),",
						"          Revenue = quantity*Lenskart_Price) ~> addYearRevenue",
						"addYearMonth aggregate(groupBy(Year,",
						"          Month,",
						"          classification),",
						"     TotalRevenue = sum(Revenue)) ~> CategoryMonthlyRevenue",
						"addYearRevenue aggregate(groupBy(Year,",
						"          classification),",
						"     TotalYearlyRevenue = sum(Revenue)) ~> TotalrevenueYearly",
						"addYearMonth aggregate(groupBy(Month,",
						"          classification),",
						"     TotalMonthlyRevenue = sum(Revenue)) ~> totalRevenueMonth",
						"Transactions2, Products join(product_id == id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joiningProduct",
						"joiningProduct select(mapColumn(",
						"          quantity,",
						"          transaction_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NecessaryFields2",
						"NecessaryFields2 derive(Year = year(transaction_date)) ~> addYear",
						"addYear aggregate(groupBy(Year),",
						"     TotalProducts = sum(quantity)) ~> TotalProductsPerYear",
						"CategoryMonthlyRevenue sort(desc(Year, true),",
						"     asc(Month, true)) ~> RevenueMonthYear",
						"totalRevenueMonth sort(asc(Month, true)) ~> Sorting",
						"TotalrevenueYearly sort(asc(Year, true)) ~> Sorting1",
						"SoldTotalQtyCategory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SoldTotalQtyCategoryby",
						"SoldRevenueByCategory sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> RevenuePerCategory",
						"ProductRevQty sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> RevenuePerProduct",
						"Sorting1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TotalRevenuePerYear",
						"Sorting sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MonthlyRevenue",
						"RevenueMonthYear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> RevenueByMonthPerYear",
						"TotalProductsPerYear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TotalProductPerYear",
						"QtyproductBought sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MostLoyalCustomer"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/transactionrefined')]",
				"[concat(variables('factoryId'), '/datasets/Customer')]",
				"[concat(variables('factoryId'), '/datasets/Manan_Om')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]",
				"[concat(variables('factoryId'), '/datasets/CategoryYearlyRevenue')]",
				"[concat(variables('factoryId'), '/datasets/CategoryMonthlyRevenue')]",
				"[concat(variables('factoryId'), '/datasets/CategoryRevenueByMonthPerYear')]",
				"[concat(variables('factoryId'), '/datasets/TotalRevenuePerYear')]",
				"[concat(variables('factoryId'), '/datasets/MostLoyalCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/facts_dimentsion_creation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "transactionRefined_to_sql",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ProductRefined_to_sql",
								"type": "DatasetReference"
							},
							"name": "DimensionProducts"
						},
						{
							"dataset": {
								"referenceName": "customer_data_to_sql",
								"type": "DatasetReference"
							},
							"name": "DimensionsCustomers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "facts_ds_transaction_sql",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "dim_products_sink",
								"type": "DatasetReference"
							},
							"name": "dimProducts"
						},
						{
							"dataset": {
								"referenceName": "dim_customer_sink",
								"type": "DatasetReference"
							},
							"name": "dimCustomerSink"
						}
					],
					"transformations": [
						{
							"name": "SelectReqCols"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          product_id as string,",
						"          quantity as integer,",
						"          transaction_date as date,",
						"          transaction_id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          id as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          {width(in mm)} as integer,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          is_tbyb as boolean,",
						"          tags as string,",
						"          is_ditto as boolean,",
						"          classification as string,",
						"          wishlistCount as integer,",
						"          purchaseCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkIos as string,",
						"          qty as integer,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          isCygnusEnabled as boolean,",
						"          isCashbackApplicable as boolean,",
						"          searchProductName as string,",
						"          {Market_Price(INR)} as integer,",
						"          {Lenskart_Price(INR)} as integer,",
						"          Discount_Percentage as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimensionProducts",
						"source(output(",
						"          customer_id as string,",
						"          first_name as string,",
						"          last_name as string,",
						"          email as string,",
						"          phone_number as string,",
						"          address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimensionsCustomers",
						"DimensionProducts select(mapColumn(",
						"          id,",
						"          color,",
						"          size,",
						"          {width(in mm)},",
						"          brand_name,",
						"          model_name,",
						"          classification,",
						"          wishlistCount,",
						"          purchaseCount,",
						"          avgRating,",
						"          totalNoOfRatings,",
						"          offerName,",
						"          qty,",
						"          searchProductName,",
						"          {Market_Price(INR)},",
						"          {Lenskart_Price(INR)},",
						"          Discount_Percentage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReqCols",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"SelectReqCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> dimProducts",
						"DimensionsCustomers sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> dimCustomerSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/transactionRefined_to_sql')]",
				"[concat(variables('factoryId'), '/datasets/ProductRefined_to_sql')]",
				"[concat(variables('factoryId'), '/datasets/customer_data_to_sql')]",
				"[concat(variables('factoryId'), '/datasets/facts_ds_transaction_sql')]",
				"[concat(variables('factoryId'), '/datasets/dim_products_sink')]",
				"[concat(variables('factoryId'), '/datasets/dim_customer_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mohana')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dataset_productsRefined_transform",
								"type": "DatasetReference"
							},
							"name": "ProuctSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "BestSellingBrand",
								"type": "DatasetReference"
							},
							"name": "TopSellingBrandOnCount",
							"rejectedDataLinkedService": {
								"referenceName": "ls_lenskart_raw_blob",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "total_sale_of_brands",
								"type": "DatasetReference"
							},
							"name": "totalSaleOfBrands"
						}
					],
					"transformations": [
						{
							"name": "BrandAggregation"
						},
						{
							"name": "Typecasting"
						},
						{
							"name": "BrandRanking"
						},
						{
							"name": "TopSellingBrand"
						},
						{
							"name": "TopBrandSelect"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          product_url as string,",
						"          color as string,",
						"          size as string,",
						"          width as integer,",
						"          brand_name as string,",
						"          brand_name_en as string,",
						"          model_name as string,",
						"          is_tbyb as boolean,",
						"          tags as string,",
						"          is_ditto as boolean,",
						"          classification as string,",
						"          specifications as string,",
						"          wishlistCount as integer,",
						"          purchaseCount as integer,",
						"          avgRating as integer,",
						"          totalNoOfRatings as integer,",
						"          hashtagList as string,",
						"          offerName as string,",
						"          cmsLinkIos as string,",
						"          qty as integer,",
						"          subCollection as string,",
						"          subCollectionId as string,",
						"          isCygnusEnabled as boolean,",
						"          isCashbackApplicable as boolean,",
						"          searchProductName as string,",
						"          Market_Price as integer,",
						"          Lenskart_Price as integer,",
						"          Discount_Percentage as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProuctSource",
						"ProuctSource aggregate(groupBy(brand_name),",
						"     tot_purchaseCount = sum(purchaseCount)) ~> BrandAggregation",
						"BrandAggregation cast(output(",
						"          tot_purchaseCount as integer",
						"     ),",
						"     errors: true) ~> Typecasting",
						"Typecasting rank(desc(tot_purchaseCount, true),",
						"     output(rank1 as long)) ~> BrandRanking",
						"BrandRanking filter(equals(rank1,1)) ~> TopSellingBrand",
						"TopSellingBrand select(mapColumn(",
						"          brand_name,",
						"          tot_purchaseCount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TopBrandSelect",
						"TopBrandSelect sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TopSellingBrandOnCount",
						"BrandRanking sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> totalSaleOfBrands"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dataset_productsRefined_transform')]",
				"[concat(variables('factoryId'), '/datasets/BestSellingBrand')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_lenskart_raw_blob')]",
				"[concat(variables('factoryId'), '/datasets/total_sale_of_brands')]"
			]
		}
	]
}