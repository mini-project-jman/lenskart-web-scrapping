{
	"name": "M2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dataset_productsRefined_transform",
						"type": "DatasetReference"
					},
					"name": "productSource"
				},
				{
					"dataset": {
						"referenceName": "transactionrefined",
						"type": "DatasetReference"
					},
					"name": "txnSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable11",
						"type": "DatasetReference"
					},
					"name": "ClassificationSoldCount",
					"rejectedDataLinkedService": {
						"referenceName": "ls_lenskart_raw_blob",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "ProductJoin"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "cast1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          product_url as string,",
				"          color as string,",
				"          size as string,",
				"          width as integer,",
				"          brand_name as string,",
				"          brand_name_en as string,",
				"          model_name as string,",
				"          is_tbyb as boolean,",
				"          tags as string,",
				"          is_ditto as boolean,",
				"          classification as string,",
				"          specifications as string,",
				"          wishlistCount as integer,",
				"          purchaseCount as integer,",
				"          avgRating as integer,",
				"          totalNoOfRatings as integer,",
				"          hashtagList as string,",
				"          offerName as string,",
				"          cmsLinkIos as string,",
				"          qty as integer,",
				"          subCollection as string,",
				"          subCollectionId as string,",
				"          isCygnusEnabled as boolean,",
				"          isCashbackApplicable as boolean,",
				"          searchProductName as string,",
				"          Market_Price as integer,",
				"          Lenskart_Price as integer,",
				"          Discount_Percentage as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> productSource",
				"source(output(",
				"          customer_id as string,",
				"          product_id as string,",
				"          quantity as integer,",
				"          transaction_date as date,",
				"          transaction_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> txnSource",
				"productSource, txnSource join(id == product_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> ProductJoin",
				"ProductJoin aggregate(groupBy(classification),",
				"     quantity_sold = sum(quantity)) ~> aggregate1",
				"cast1 filter(like(transaction_date,'2023%')) ~> filter1",
				"ProductJoin cast(output(",
				"          transaction_date as string",
				"     ),",
				"     errors: true) ~> cast1",
				"derivedColumn1 aggregate(groupBy(transaction_date),",
				"     Lenskart_Price = sum(Lenskart_Price)) ~> aggregate2",
				"filter1 derive(transaction_date = substring(transaction_date,1,4)) ~> derivedColumn1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> ClassificationSoldCount"
			]
		}
	}
}