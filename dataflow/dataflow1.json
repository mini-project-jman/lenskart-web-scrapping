{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "productas",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "transactionrefined",
						"type": "DatasetReference"
					},
					"name": "Transactions"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "aggregate2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          product_url as string,",
				"          color as string,",
				"          size as string,",
				"          width as integer,",
				"          brand_name as string,",
				"          brand_name_en as string,",
				"          model_name as string,",
				"          is_tbyb as string,",
				"          tags as string,",
				"          is_ditto as string,",
				"          classification as string,",
				"          specifications as string,",
				"          wishlistCount as string,",
				"          purchaseCount as string,",
				"          avgRating as string,",
				"          totalNoOfRatings as string,",
				"          hashtagList as string,",
				"          offerName as string,",
				"          cmsLinkIos as string,",
				"          qty as string,",
				"          subCollection as string,",
				"          subCollectionId as string,",
				"          isCygnusEnabled as string,",
				"          isCashbackApplicable as string,",
				"          searchProductName as string,",
				"          Market_Price as string,",
				"          Lenskart_Price as string,",
				"          Discount_Percentage as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          customer_id as string,",
				"          product_id as string,",
				"          quantity as integer,",
				"          transaction_date as date,",
				"          transaction_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Transactions",
				"Transactions aggregate(groupBy(product_id),",
				"     TotalQuantity = sum(quantity)) ~> aggregate1",
				"source1, aggregate1 join(id == product_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          classification,",
				"          TotalQuantity",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(classification),",
				"     TotalQuantity = sum(TotalQuantity)) ~> aggregate2"
			]
		}
	}
}