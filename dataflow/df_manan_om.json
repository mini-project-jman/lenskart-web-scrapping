{
	"name": "df_manan_om",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "Products"
				},
				{
					"dataset": {
						"referenceName": "transactionrefined",
						"type": "DatasetReference"
					},
					"name": "Transactions"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "ProductsRevenueHigh"
				},
				{
					"dataset": {
						"referenceName": "Customer",
						"type": "DatasetReference"
					},
					"name": "Customers"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "products1"
				},
				{
					"dataset": {
						"referenceName": "transactionrefined",
						"type": "DatasetReference"
					},
					"name": "Transactions1"
				},
				{
					"dataset": {
						"referenceName": "transactionrefined",
						"type": "DatasetReference"
					},
					"name": "Transactions2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Manan_Om",
						"type": "DatasetReference"
					},
					"name": "SoldTotalQtyCategoryby"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "RevenuePerCategory"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "RevenuePerProduct"
				},
				{
					"dataset": {
						"referenceName": "CategoryYearlyRevenue",
						"type": "DatasetReference"
					},
					"name": "TotalRevenuePerYear"
				},
				{
					"dataset": {
						"referenceName": "CategoryMonthlyRevenue",
						"type": "DatasetReference"
					},
					"name": "MonthlyRevenue"
				},
				{
					"dataset": {
						"referenceName": "CategoryRevenueByMonthPerYear",
						"type": "DatasetReference"
					},
					"name": "RevenueByMonthPerYear"
				},
				{
					"dataset": {
						"referenceName": "TotalRevenuePerYear",
						"type": "DatasetReference"
					},
					"name": "TotalProductPerYear"
				},
				{
					"dataset": {
						"referenceName": "MostLoyalCustomer",
						"type": "DatasetReference"
					},
					"name": "MostLoyalCustomer"
				}
			],
			"transformations": [
				{
					"name": "QtyofEachproduct"
				},
				{
					"name": "transaction"
				},
				{
					"name": "Categoryfield"
				},
				{
					"name": "SoldTotalQtyCategory"
				},
				{
					"name": "JoiningQtyProduct1"
				},
				{
					"name": "ptdQtyyDetails"
				},
				{
					"name": "derivedRevenue"
				},
				{
					"name": "SoldRevenueByCategory"
				},
				{
					"name": "JoiningQtyProduct2"
				},
				{
					"name": "NecessaryFields1"
				},
				{
					"name": "CountingNoOfProducts"
				},
				{
					"name": "QtyproductBought"
				},
				{
					"name": "JoiningQtyProducts3"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "ProductRevQty"
				},
				{
					"name": "joinProductDetail"
				},
				{
					"name": "NecessaryFieldsGroupByMonth"
				},
				{
					"name": "addYearMonth"
				},
				{
					"name": "addYearRevenue"
				},
				{
					"name": "CategoryMonthlyRevenue"
				},
				{
					"name": "TotalrevenueYearly"
				},
				{
					"name": "totalRevenueMonth"
				},
				{
					"name": "joiningProduct"
				},
				{
					"name": "NecessaryFields2"
				},
				{
					"name": "addYear",
					"description": "Creating/updating the columns 'quantity, Year'"
				},
				{
					"name": "TotalProductsPerYear"
				},
				{
					"name": "RevenueMonthYear"
				},
				{
					"name": "Sorting"
				},
				{
					"name": "Sorting1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          product_url as string,",
				"          color as string,",
				"          size as string,",
				"          width as integer,",
				"          brand_name as string,",
				"          brand_name_en as string,",
				"          model_name as string,",
				"          is_tbyb as boolean,",
				"          tags as string,",
				"          is_ditto as boolean,",
				"          classification as string,",
				"          specifications as string,",
				"          wishlistCount as integer,",
				"          purchaseCount as integer,",
				"          avgRating as integer,",
				"          totalNoOfRatings as integer,",
				"          hashtagList as string,",
				"          offerName as string,",
				"          cmsLinkIos as string,",
				"          qty as integer,",
				"          subCollection as string,",
				"          subCollectionId as string,",
				"          isCygnusEnabled as boolean,",
				"          isCashbackApplicable as boolean,",
				"          searchProductName as string,",
				"          Market_Price as integer,",
				"          Lenskart_Price as integer,",
				"          Discount_Percentage as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Products",
				"source(output(",
				"          customer_id as string,",
				"          product_id as string,",
				"          quantity as integer,",
				"          transaction_date as date,",
				"          transaction_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Transactions",
				"source(output(",
				"          id as string,",
				"          product_url as string,",
				"          color as string,",
				"          size as string,",
				"          width as integer,",
				"          brand_name as string,",
				"          brand_name_en as string,",
				"          model_name as string,",
				"          is_tbyb as boolean,",
				"          tags as string,",
				"          is_ditto as boolean,",
				"          classification as string,",
				"          specifications as string,",
				"          wishlistCount as integer,",
				"          purchaseCount as integer,",
				"          avgRating as integer,",
				"          totalNoOfRatings as integer,",
				"          hashtagList as string,",
				"          offerName as string,",
				"          cmsLinkIos as string,",
				"          qty as integer,",
				"          subCollection as string,",
				"          subCollectionId as string,",
				"          isCygnusEnabled as boolean,",
				"          isCashbackApplicable as boolean,",
				"          searchProductName as string,",
				"          Market_Price as integer,",
				"          Lenskart_Price as integer,",
				"          Discount_Percentage as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ProductsRevenueHigh",
				"source(output(",
				"          customer_id as string,",
				"          first_name as string,",
				"          last_name as string,",
				"          email as string,",
				"          phone_number as string,",
				"          address as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Customers",
				"source(output(",
				"          id as string,",
				"          product_url as string,",
				"          color as string,",
				"          size as string,",
				"          width as integer,",
				"          brand_name as string,",
				"          brand_name_en as string,",
				"          model_name as string,",
				"          is_tbyb as boolean,",
				"          tags as string,",
				"          is_ditto as boolean,",
				"          classification as string,",
				"          specifications as string,",
				"          wishlistCount as integer,",
				"          purchaseCount as integer,",
				"          avgRating as integer,",
				"          totalNoOfRatings as integer,",
				"          hashtagList as string,",
				"          offerName as string,",
				"          cmsLinkIos as string,",
				"          qty as integer,",
				"          subCollection as string,",
				"          subCollectionId as string,",
				"          isCygnusEnabled as boolean,",
				"          isCashbackApplicable as boolean,",
				"          searchProductName as string,",
				"          Market_Price as integer,",
				"          Lenskart_Price as integer,",
				"          Discount_Percentage as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> products1",
				"source(output(",
				"          customer_id as string,",
				"          product_id as string,",
				"          quantity as integer,",
				"          transaction_date as date,",
				"          transaction_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Transactions1",
				"source(output(",
				"          customer_id as string,",
				"          product_id as string,",
				"          quantity as integer,",
				"          transaction_date as date,",
				"          transaction_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Transactions2",
				"Transactions aggregate(groupBy(product_id),",
				"     TotalQuantity = sum(quantity)) ~> QtyofEachproduct",
				"Products, QtyofEachproduct join(id == product_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> transaction",
				"transaction select(mapColumn(",
				"          classification,",
				"          TotalQuantity",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Categoryfield",
				"Categoryfield aggregate(groupBy(classification),",
				"     TotalQuantity = sum(TotalQuantity)) ~> SoldTotalQtyCategory",
				"ProductsRevenueHigh, QtyofEachproduct join(id == product_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoiningQtyProduct1",
				"JoiningQtyProduct1 select(mapColumn(",
				"          classification,",
				"          Lenskart_Price,",
				"          TotalQuantity",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ptdQtyyDetails",
				"ptdQtyyDetails derive(Revenue = Lenskart_Price*TotalQuantity) ~> derivedRevenue",
				"derivedRevenue aggregate(groupBy(classification),",
				"     TotalRevenue = sum(Revenue)) ~> SoldRevenueByCategory",
				"Customers, Transactions join(Customers@customer_id == Transactions@customer_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoiningQtyProduct2",
				"JoiningQtyProduct2 select(mapColumn(",
				"          customer_id = Transactions@customer_id,",
				"          first_name,",
				"          last_name,",
				"          email,",
				"          phone_number,",
				"          address,",
				"          product_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> NecessaryFields1",
				"NecessaryFields1 aggregate(groupBy(customer_id,",
				"          first_name,",
				"          last_name,",
				"          phone_number),",
				"     No_of_Products = count(product_id)) ~> CountingNoOfProducts",
				"CountingNoOfProducts sort(desc(No_of_Products, true)) ~> QtyproductBought",
				"products1, QtyofEachproduct join(id == product_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoiningQtyProducts3",
				"JoiningQtyProducts3 select(mapColumn(",
				"          id,",
				"          product_url,",
				"          color,",
				"          size,",
				"          width,",
				"          brand_name,",
				"          Lenskart_Price,",
				"          TotalQuantity",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(TotalRevenue = Lenskart_Price*TotalQuantity) ~> derivedColumn2",
				"derivedColumn2 sort(desc(TotalQuantity, true)) ~> ProductRevQty",
				"Transactions1, Products join(product_id == id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinProductDetail",
				"joinProductDetail select(mapColumn(",
				"          customer_id,",
				"          product_id,",
				"          quantity,",
				"          transaction_date,",
				"          brand_name,",
				"          Lenskart_Price,",
				"          classification",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> NecessaryFieldsGroupByMonth",
				"NecessaryFieldsGroupByMonth derive(Revenue = quantity*Lenskart_Price,",
				"          Year = year(transaction_date),",
				"          Month = month(transaction_date)) ~> addYearMonth",
				"NecessaryFieldsGroupByMonth derive(Year = year(transaction_date),",
				"          Revenue = quantity*Lenskart_Price) ~> addYearRevenue",
				"addYearMonth aggregate(groupBy(Year,",
				"          Month,",
				"          classification),",
				"     TotalRevenue = sum(Revenue)) ~> CategoryMonthlyRevenue",
				"addYearRevenue aggregate(groupBy(Year,",
				"          classification),",
				"     TotalYearlyRevenue = sum(Revenue)) ~> TotalrevenueYearly",
				"addYearMonth aggregate(groupBy(Month,",
				"          classification),",
				"     TotalMonthlyRevenue = sum(Revenue)) ~> totalRevenueMonth",
				"Transactions2, Products join(product_id == id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joiningProduct",
				"joiningProduct select(mapColumn(",
				"          quantity,",
				"          transaction_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> NecessaryFields2",
				"NecessaryFields2 derive(Year = year(transaction_date)) ~> addYear",
				"addYear aggregate(groupBy(Year),",
				"     TotalProducts = sum(quantity)) ~> TotalProductsPerYear",
				"CategoryMonthlyRevenue sort(desc(Year, true),",
				"     asc(Month, true)) ~> RevenueMonthYear",
				"totalRevenueMonth sort(asc(Month, true)) ~> Sorting",
				"TotalrevenueYearly sort(asc(Year, true)) ~> Sorting1",
				"SoldTotalQtyCategory sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SoldTotalQtyCategoryby",
				"SoldRevenueByCategory sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> RevenuePerCategory",
				"ProductRevQty sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> RevenuePerProduct",
				"Sorting1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> TotalRevenuePerYear",
				"Sorting sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> MonthlyRevenue",
				"RevenueMonthYear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> RevenueByMonthPerYear",
				"TotalProductsPerYear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> TotalProductPerYear",
				"QtyproductBought sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> MostLoyalCustomer"
			]
		}
	}
}